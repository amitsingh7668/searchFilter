{"version":3,"sources":["logo.svg","info-json.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Information","name","age","country","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchSpace","event","keyword","target","value","setState","search","state","_this2","items","filter","data","toLowerCase","includes","map","react_default","a","createElement","className","type","placeholder","style","border","borderRadius","position","left","height","width","marginTop","marginBottom","onChange","e","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKC4DzBC,eA1DK,CAClB,CACEC,KAAO,SACPC,IAAM,GACNC,QAAU,OAEZ,CACEF,KAAO,MACPC,IAAM,GACNC,QAAU,OAEZ,CACEF,KAAO,OACPC,IAAM,GACNC,QAAU,UAEZ,CACEF,KAAO,SACPC,IAAM,GACNC,QAAU,UAEZ,CACEF,KAAO,SACPC,IAAM,GACNC,QAAU,SAEZ,CACEF,KAAO,OACPC,IAAM,GACNC,QAAU,WAEZ,CACEF,KAAO,UACPC,IAAM,GACNC,QAAU,UAEZ,CACEF,KAAO,SACPC,IAAM,GACNC,QAAU,SAEZ,CACEF,KAAO,YACPC,IAAM,GACNC,QAAU,OAEZ,CACEF,KAAO,MACPC,IAAM,GACNC,QAAU,SAEZ,CACEF,KAAO,MACPC,IAAM,GACNC,QAAU,WCECC,cAlDb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,YAAY,SAACC,GACX,IAAIC,EAAUD,EAAME,OAAOC,MAC3BX,EAAKY,SAAS,CAACC,OAAOJ,KAPtBT,EAAKc,MAAM,CACTD,OAAO,MAJEb,wEAaL,IAAAe,EAAAZ,KAcAa,EAAQrB,EAAYsB,OAAO,SAACC,GAChC,OAAwB,MAArBH,EAAKD,MAAMD,OACHK,EACHA,EAAKtB,KAAKuB,cAAcC,SAASL,EAAKD,MAAMD,OAAOM,gBAAkBD,EAAKpB,QAAQqB,cAAcC,SAASL,EAAKD,MAAMD,OAAOM,eACxHD,OADN,IAGJG,IAAI,SAAAH,GACL,OACAI,EAAAC,EAAAC,cAAA,WACMF,EAAAC,EAAAC,cAAA,WAAON,EAAKtB,SAKpB,OACE0B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,4BAA4BC,MA1BzC,CAClBC,OAAO,QACPC,aAAa,OACbC,SAAS,WACTC,KAAK,OACLC,OAAO,MACPC,MAAM,OACNC,UAAU,MACVC,aAAa,QAkBmEC,SAAU,SAACC,GAAD,OAAKvB,EAAKR,YAAY+B,MAC/GtB,UA9CWuB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6ac9c22c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import react,{Component} from \"react\";\n\nconst Information = [\n  {\n    \"name\":\"Samule\",\n    \"age\":21,\n    \"country\":\"USA\"\n  },\n  {\n    \"name\":\"Sam\",\n    \"age\":21,\n    \"country\":\"USA\"\n  },\n  {\n    \"name\":\"Mark\",\n    \"age\":21,\n    \"country\":\"Africa\"\n  },\n  {\n    \"name\":\"Markus\",\n    \"age\":21,\n    \"country\":\"Africa\"\n  },\n  {\n    \"name\":\"Aayush\",\n    \"age\":21,\n    \"country\":\"India\"\n  },\n  {\n    \"name\":\"Sean\",\n    \"age\":21,\n    \"country\":\"Ireland\"\n  },\n  {\n    \"name\":\"Eduardo\",\n    \"age\":21,\n    \"country\":\"France\"\n  },\n  {\n    \"name\":\"Dustin\",\n    \"age\":21,\n    \"country\":\"Spain\"\n  },\n  {\n    \"name\":\"Alexendra\",\n    \"age\":21,\n    \"country\":\"USA\"\n  },\n  {\n    \"name\":\"Lee\",\n    \"age\":21,\n    \"country\":\"China\"\n  },\n  {\n    \"name\":\"Jim\",\n    \"age\":21,\n    \"country\":\"Korea\"\n  }\n];\n\nexport default Information;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Information from './info-json';\n\n\nclass App extends Component {\n\n  constructor(){\n    super();\n\n    this.state={\n      search:null\n    };\n  }\n\n  searchSpace=(event)=>{\n    let keyword = event.target.value;\n    this.setState({search:keyword})\n  }\n\n  render(){\n    const styleInfo = {\n      paddingRight:'10px'\n    }\n    const elementStyle ={\n      border:'solid',\n      borderRadius:'10px',\n      position:'relative',\n      left:'10vh',\n      height:'3vh',\n      width:'20vh',\n      marginTop:'5vh',\n      marginBottom:'10vh'\n    }\n    const items = Information.filter((data)=>{\n      if(this.state.search == null)\n          return data\n      else if(data.name.toLowerCase().includes(this.state.search.toLowerCase()) || data.country.toLowerCase().includes(this.state.search.toLowerCase())){\n          return data\n      }\n    }).map(data=>{\n      return(\n      <div>\n            <div >{data.name}</div>\n      </div>\n      )\n    })\n\n    return (\n      <div className=\"center\">\n      <input type=\"text\" placeholder=\"Enter item to be searched\" style={elementStyle} onChange={(e)=>this.searchSpace(e)} />\n      {items}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}